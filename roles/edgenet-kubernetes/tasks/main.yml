---
# Kubernetes requires swap to be disabled.
- name: Ensure swap is disabled on boot
  replace:
    path: /etc/fstab
    regexp: '^\s*[^#](.+swap\s+swap.+)$'
    replace: '# \1'
    backup: true

- name: Ensure swap is disabled for the session
  tags: ['skip_ansible_lint']
  command: swapoff -a

# This is to simplify future Ansible calls, since by default
# it uses /usr/bin/python which does not exists on Ubuntu.
- name: Ensure python is python3 on Ubuntu
  apt:
    name: python-is-python3
    state: present
  when: ansible_distribution == 'Ubuntu'

# This is a (temporary?) hack to fix an issue with Google's Kubernetes repository.
# E: Failed to fetch https://packages.cloud.google.com/apt/dists/kubernetes-xenial/main/binary-arm64/by-hash/SHA256/536531faf6df19cafb3ee304de5ed6787c3b5a1c20f1223dcbe6fd70ff9f93bb  404  Not Found [IP: 2404:6800:4004:81f::200e 443]
- name: Ensure APT uses IPv4
  copy:
    dest: /etc/apt/apt.conf.d/99force-ipv4
    mode: "0644"
    content: 'Acquire::ForceIPv4 "true";'
  when: ansible_os_family == 'Debian'

- name: Install containerd
  include_tasks: containerd.yml

- name: Install Kubernetes
  include_tasks: kube.yml

- name: Install Wireguard
  include_tasks: wireguard.yml

# Calico-specific NetworkManager configuration
# https://docs.projectcalico.org/maintenance/troubleshoot/troubleshooting#configure-networkmanager
- name: Ensure NetworkManager conf.d exists
  file:
    path: /etc/NetworkManager/conf.d
    state: directory
    mode: "0755"

- name: Ensure Calico NetworkManager configuration is present
  copy:
    src: NetworkManager-calico.conf
    dest: /etc/NetworkManager/conf.d/calico.conf
    mode: "0644"

# Kubernetes required modules and network configuration
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/
- name: Ensure Kubernetes kernel modules are loaded on boot
  copy:
    src: modules-k8s.conf
    dest: /etc/modules-load.d/k8s.conf
    mode: "0644"

- name: Ensure Kubernetes kernel modules are loaded for the session
  tags: ['skip_ansible_lint']
  command:
    cmd: "modprobe {{ item }}"
  loop:
    - br_netfilter
    - ip_conntrack
    - overlay

- name: Ensure iptables can see bridged traffic
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.ipv4.ip_forward

- name: Ensure conntrack table size is large enough
  sysctl:
    name: net.netfilter.nf_conntrack_max
    value: "1000000"
    state: present

# Fix an issue with CoreDNS on systems running systemd-resolved
# See https://coredns.io/plugins/loop/#troubleshooting-loops-in-kubernetes-clusters
- name: Check if systemd-resolved is in use
  stat:
    path: /run/systemd/resolve/resolv.conf
  register: resolved_resolv_conf

- name: Ensure native DNS resolvers are used
  file:
    src: /run/systemd/resolve/resolv.conf
    dest: /etc/resolv.conf
    mode: "0644"
    state: link
  when: resolved_resolv_conf.stat.exists

- name: Ensure EdgeNet directory exists
  file:
    path: /opt/edgenet
    state: directory
    mode: "0755"

- name: Ensure EdgeNet binary is present
  get_url:
    url: "{{ edgenet_node_url }}"
    # The checksum is necessary for Ansible to re-download the binary if it has changed.
    checksum: "{{ edgenet_node_checksum }}"
    dest: /opt/edgenet/node
    mode: "0755"
    timeout: 120

- name: Ensure EdgeNet service is present
  copy:
    src: edgenet.service
    dest: /etc/systemd/system/edgenet.service
    mode: "0644"

- name: Flush handlers
  meta: flush_handlers

- name: "Enable EdgeNet service (state={{ edgenet_service_state }})"
  systemd:
    name: edgenet
    state: "{{ edgenet_service_state }}"
    enabled: true
    daemon_reload: true
